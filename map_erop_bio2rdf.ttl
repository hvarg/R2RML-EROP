@prefix rr:   <http://www.w3.org/ns/r2rml#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dc:   <http://purl.org/dc/terms/> .
@prefix erop: <http://bio2rdf.org/erop:> .
@prefix voc:  <http://bio2rdf.org/erop_vocabulary:> .
@prefix res:  <http://bio2rdf.org/erop_resource:> .
@prefix b2v:  <http://bio2rdf.org/bio2rdf_vocabulary:> .

## Por alguna razon esto no funciona.
#<#dates> rr:sqlQuery """
#  SELECT STR_TO_DATE(date_____k, '%d.%m.%Y') as date,
#         STR_TO_DATE(date_m___k, '%d.%m.%Y') as mdate,
#         erop_nmb_k
#  FROM erop;
#""".

# Query para obtener
<#source_view> rr:sqlQuery """
  SELECT erop_nmb_k,
         substring_index(substring_index(all_kar__k,')',1), '(', -1) as karyote,
         substring_index(substring_index(substring_index(
                all_kar__k, ', ', -1),')',1),'(',-1) as karyote2,
         substring_index(substring_index(all_kgd__k,')',1), '(', -1) as kgd,
         substring_index(substring_index(substring_index(
                all_kgd__k, ')', 2), '(', -1), ')', 1) as kgd2,
         substring_index(substring_index(substring_index(
                all_kgd__k, ')', 3), '(', -1), ')', 1) as kgd3,
         substring_index(substring_index(all_phyl_k,')',1), '(', -1) as phyl1,
         substring_index(substring_index(substring_index(
                all_phyl_k, ')', 2), '(', -1), ')', 1) as phyl2,
         substring_index(substring_index(substring_index(
                all_phyl_k, ')', 3), '(', -1), ')', 1) as phyl3,
         substring_index(substring_index(all_b_cl_k,')',1), '(', -1) as class1,
         substring_index(substring_index(substring_index(
                all_b_cl_k, ')', 2), '(', -1), ')', 1) as class2,
         substring_index(substring_index(substring_index(
                all_b_cl_k, ')', 3), '(', -1), ')', 1) as class3,
         substring_index(substring_index(substring_index(
                all_b_cl_k, ')', 4), '(', -1), ')', 1) as class4,
         substring_index(substring_index(substring_index(
                all_b_cl_k, ')', 5), '(', -1), ')', 1) as class5,
         substring_index(substring_index(substring_index(
                all_b_cl_k, ')', 6), '(', -1), ')', 1) as class6
  FROM erop;
""" .

<#references> rr:sqlQuery """
  SELECT seq_refa_v, seq_reft_v, seq_refj_v, erop_nmb_k,
         seq_refy_v, country__v, seq_refmlv,
    IF( seq_refmlv = '', 
        SUBSTR(PASSWORD(CONCAT(seq_refy_v,seq_refa_v)), 2),
        SUBSTR(PASSWORD(seq_refmlv), 2) ) as id
  FROM erop WHERE seq_refa_v != ''
""" .

#<#karyotypes> rr:sqlQuery """
#  SELECT DISTINCT 
#    substring_index(substring_index(all_kar__k,')',1), '(', -1) as karyotype
#  FROM erop;
#""".

<TriplesMap1>
  a rr:TriplesMap;
  rr:logicalTable [ rr:tableName "erop" ];
  rr:subjectMap [
    a rr:Subject;
    rr:template "http://bio2rdf.org/erop:{erop_nmb_k}";
    rr:termType rr:IRI;
    rr:class voc:Oligopeptide;
    rr:class voc:Resource;
  ];

  # rdfs:label =  {pep_name_k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant rdfs:label ];
    rr:objectMap    [ rr:column "pep_name_k"; rr:datatype xsd:string; ];
  ];

  # Titulo sin parentesis (TODO: no esta en la db)
  #rr:predicateObjectMap [
  #  rr:predicateMap [ rr:constant dc:title ];
  #  rr:objectMap    [ rr:column "pep_name_k"; rr:datatype xsd:string; ];
  #];

  # dc:identifier = erop:{erop_nmb_k} 
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant dc:identifier ];
    rr:objectMap    [ rr:template "erop:{erop_nmb_k}"; rr:datatype xsd:string; ];
  ];

  # b2rdf:namespace = erop
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant b2v:namespace ];
    rr:objectMap    [ rr:constant "erop"; rr:datatype xsd:string; ];
  ];

  # b2rdf:identifier = {erop_nmb_k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant b2v:identifier ];
    rr:objectMap    [ rr:column "erop_nmb_k"; rr:datatype xsd:string; ];
  ];

  # voc:creation_date = {date_____k} FIXME
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:creation_date ];
    rr:objectMap    [ rr:column "date_____k"; rr:datatype xsd:date; ];
  ];

  # voc:modification_date = {date_m___k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:modification_date ];
    rr:objectMap    [ rr:column "date_m___k"; rr:datatype xsd:date; ];
  ];

  # voc:amino_acid_number = {aar_sum__k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant  voc:amino_acid_number];
    rr:objectMap    [ rr:column "aar_sum__k"; rr:datatype xsd:decimal; ];
  ];

  # voc:radical_number = {tsr_sum__k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant  voc:radical_number];
    rr:objectMap    [ rr:column "tsr_sum__k"; rr:datatype xsd:float; ];
  ];

  # voc:sequence = {seq_1____k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant  voc:sequence];
    rr:objectMap    [ rr:column "seq_1____k"; rr:datatype xsd:string; ];
  ];

  # voc:part_of = {part_of__v}  TODO: que es esto?
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant  voc:part_of];
    rr:objectMap    [ rr:column "part_of__v"; rr:datatype xsd:string; ];
  ];

  # voc:calculated_molecular_mass = {m_w_c____k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant  voc:calculated_molecular_mass ];
    rr:objectMap    [ rr:column "m_w_c____k"; rr:datatype xsd:float; ];
  ];

  # voc:experimental_molecular_mass = {m_w______k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant  voc:experimental_molecular_mass ];
    rr:objectMap    [ rr:column "m_w______k"; rr:datatype xsd:float; ];
  ];

  # voc:calculated_pI = {pi_c_____k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant  voc:calculated_pI];
    rr:objectMap    [ rr:column "pi_c_____k"; rr:datatype xsd:float; ];
  ];

  # voc:experimental_pI = {pi_c_____k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant  voc:experimental_pI];
    rr:objectMap    [ rr:column "pi_______k"; rr:datatype xsd:float; ];
  ];

  # voc:function = {function_k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:function ];
    rr:objectMap    [ rr:column "function_k"; rr:datatype xsd:string; ];
  ];

  # voc:function_class = {func_cl__k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:function_class ];
    rr:objectMap    [ rr:column "func_cl__k"; rr:datatype xsd:string; ];
  ];

  # voc:family_name = {fam_name_k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:fam_name ];
    rr:objectMap    [ rr:column "fam_name_k"; rr:datatype xsd:string; ];
  ];

  # voc:family_number = {fam_nmb__k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:family_number ];
    rr:objectMap    [ rr:column "fam_nmb__k"; rr:datatype xsd:string; ];
  ];

  # voc:organism = {species__k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:organism ];
    rr:objectMap    [ rr:column "species__k"; rr:datatype xsd:string; ];
  ];

  # voc:source_content = {content__k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:source_content ];
    rr:objectMap    [ rr:column "content__k"; rr:datatype xsd:string; ];
  ];

  # voc:secreted_by = {all_tiss_k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:secreted_by ];
    rr:objectMap    [ rr:column "all_tiss_k"; rr:datatype xsd:string; ];
  ];

  # rdfs:taxon = {taxon____v}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:taxon ];
    rr:objectMap    [ rr:column "taxon____v"; rr:datatype xsd:string; ];
  ];

  # rdfs:seeAlso = {seq_refspv}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant rdfs:seeAlso ];
    rr:objectMap    [ rr:template 
      "http://www.uniprot.org/uniprot/{seq_refspv}" ];
  ];

  # voc:synonym = {syn_name_v} TODO split por ','
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:synonym ];
    rr:objectMap    [ rr:column "syn_name_v"; rr:datatype xsd:string; ];
  ].

#<TriplesMap2>
#  a rr:TriplesMap;
#  rr:logicalTable <#dates>;
#  rr:subjectMap [
#    a rr:Subject;
#    rr:template "http://bio2rdf.org/erop:{erop_nmb_k}";
#    rr:termType rr:IRI;
#  ];
#  # voc:creation_date = {date_____k}
#  rr:predicateObjectMap [
#    rr:predicateMap [ rr:constant voc:creation_date ];
#    rr:objectMap    [ rr:column "date"; rr:datatype xsd:date; ];
#  ];
#
#  # voc:modification_date = {date_m___k}
#  rr:predicateObjectMap [
#    rr:predicateMap [ rr:constant voc:modification_date ];
#    rr:objectMap    [ rr:column "mdate"; rr:datatype xsd:date; ];
#  ].

<TriplesMap3>
  a rr:TriplesMap;
  rr:logicalTable <#source_view>;
  rr:subjectMap [
    a rr:Subject;
    rr:template "http://bio2rdf.org/erop:{erop_nmb_k}";
    rr:termType rr:IRI;
  ];
  # voc:karyotype = {all_kar__k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:karyotype ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{karyote}"];
  ];
  # 
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:karyotype ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{karyote2}"];
  ];
  # voc:kingdom = {all_kgd__k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:kingdom ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{kgd}"];
  ];
  # 
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:kingdom ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{kgd2}"];
  ];
  # 
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:kingdom ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{kgd3}"];
  ];
  # voc:phylum = {all_phyl_k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:phylum ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{phyl1}"];
  ];
  # 
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:phylum ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{phyl2}"];
  ];
  # 
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:phylum ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{phyl3}"];
  ];
  # voc:class = {all_b_cl_k}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:class ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{class1}"];
  ];
  #
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:class ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{class2}"];
  ];
  #
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:class ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{class3}"];
  ];
  #
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:class ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{class4}"];
  ];
  #
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:class ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{class5}"];
  ];
  #
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:class ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{class6}"];
  ].

#<TriplesMap4>
#  a rr:TriplesMap;
#  rr:logicalTable <#karyotypes>;
#  rr:subjectMap [
#    a rr:Subject;
#    rr:template "http://bio2rdf.org/erop_resource:{karyotype}";
#    rr:termType rr:IRI;
#  ];
#  # voc_resource:{karyotype}
#  rr:predicateObjectMap [
#    rr:predicateMap [ rr:constant rdf:type ];
#    rr:objectMap    [ rr:constant voc:Karyotype ];
#  ].

<TriplesMap5>
  a rr:TriplesMap;
  rr:logicalTable <#references>;
  rr:subjectMap [
    a rr:Subject;
    rr:template "http://bio2rdf.org/erop_resource:{id}";
    rr:termType rr:IRI;
  ];
  # voc:title = {seq_reft_v}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:title ];
    rr:objectMap    [ rr:column "seq_reft_v"; rr:datatype xsd:date; ];
  ];
  # voc:country = {country__v}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:country ];
    rr:objectMap    [ rr:column "country__v"; rr:datatype xsd:date; ];
  ];
  # voc:year = {seq_refy_v}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:year ];
    rr:objectMap    [ rr:column "seq_refy_v"; rr:datatype xsd:date; ];
  ];
  # voc:author = {seq_refa_v}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:author ];
    rr:objectMap    [ rr:column "seq_refa_v"; rr:datatype xsd:date; ];
  ];
  # voc:x-pubmed = http://bio2rdf.org/pubmed:{seq_refmlv}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:x-pubmed ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/pubmed:{seq_refmlv}"];
  ];
  # voc:seeAlso = {seq_refmlv}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant rdfs:seeAlso ];
    rr:objectMap    [ rr:template 
      "http://www.ncbi.nlm.nih.gov/pubmed/{seq_refmlv}" ];
  ];
  # voc:journal = {seq_refj_v}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:journal ];
    rr:objectMap    [ rr:column "seq_refj_v"; rr:datatype xsd:date; ];
  ].

<TriplesMap6>
  a rr:TriplesMap;
  rr:logicalTable <#references>;
  rr:subjectMap [
    a rr:Subject;
    rr:template "http://bio2rdf.org/erop:{erop_nmb_k}";
    rr:termType rr:IRI;
  ];
  # voc:reference = {id}
  rr:predicateObjectMap [
    rr:predicateMap [ rr:constant voc:reference ];
    rr:objectMap    [ rr:template "http://bio2rdf.org/erop_resource:{id}" ];
  ].

@prefix rr:   <http://www.w3.org/ns/r2rml#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dc:   <http://purl.org/dc/terms/> .
@prefix erop: <http://bio2rdf.org/erop:> .
@prefix voc:  <http://bio2rdf.org/erop_vocabulary:> .
@prefix res:  <http://bio2rdf.org/erop_resource:> .
@prefix b2v:  <http://bio2rdf.org/bio2rdf_vocabulary:> .

<#kingdoms> rr:sqlQuery """
  SELECT
    erop.erop_nmb_k, 
    REPLACE(SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX
        (erop.all_kgd__k, ',', numbers.n), ',', -1), '(', -1), ')', '') 
        kingdom
  FROM (SELECT 1 n UNION ALL SELECT 2 UNION ALL SELECT 3) numbers
  INNER JOIN erop ON
    CHAR_LENGTH(erop.all_kgd__k) -CHAR_LENGTH(REPLACE(erop.all_kgd__k, ',', ''))
    >= numbers.n-1
""".
#Labels
<#distinct_kgd> rr:sqlQuery """
  SELECT DISTINCT
    REPLACE(SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX
        (erop.all_kgd__k, ',', numbers.n), ',', -1), '(', -1), ')', '') 
        kingdom,
    REPLACE(REPLACE(SUBSTRING_INDEX(SUBSTRING_INDEX
        (erop.all_kgd__k, ',', numbers.n), ',', -1), ' ', ''), '(', ' (') 
        label
  FROM (SELECT 1 n UNION ALL SELECT 2 UNION ALL SELECT 3) numbers
  INNER JOIN erop ON
    CHAR_LENGTH(erop.all_kgd__k) -CHAR_LENGTH(REPLACE(erop.all_kgd__k, ',', ''))
    >= numbers.n-1
""".

<TriplesMap1>
  a rr:TriplesMap;
  rr:logicalTable <#kingdoms>;
  rr:subjectMap [
    a rr:Subject;
    rr:template "http://bio2rdf.org/erop:{erop_nmb_k}";
    rr:termType rr:IRI;
  ];
  rr:predicateObjectMap [
    rr:predicate voc:source_kingdom;
    rr:objectMap [ rr:template "http://bio2rdf.org/erop_resource:{kingdom}" ];
  ].

<TriplesMap2>
  a rr:TriplesMap;
  rr:logicalTable <#distinct_kgd>;
  rr:subjectMap [
    a rr:Subject;
    rr:template "http://bio2rdf.org/erop_resource:{kingdom}";
    rr:termType rr:IRI;
  ];
  rr:predicateObjectMap [
    rr:predicate rdf:type;
    rr:object voc:Kingdom;
  ];
  rr:predicateObjectMap [
    rr:predicate rdfs:label;
    rr:objectMap    [ rr:column "label"; rr:datatype xsd:string; ];
  ].
